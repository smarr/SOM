"

$Id: Vector.som 29 2009-07-31 11:28:44Z michael.haupt $

Copyright (c) 2001-2013 see AUTHORS file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"

"FIXME: Implement pushFront and popFront..."

Vector = (

    | first last storage |

    "Accessing"
    at: index = (
        | storeIdx |
        storeIdx := index + first - 1.
        ^ self checkIndex: storeIdx ifValid: [ storage at: storeIdx ]
    )

    at: index put: value = (
        | storeIdx |
        storeIdx := index + first - 1.
        ^ self checkIndex: storeIdx ifValid: [ storage at: storeIdx put: value ]
    )

    first = ( ^ (self size > 0) ifTrue: [storage at: 1] ifFalse: [nil] )
    last  = ( ^ (self size > 0) ifTrue: [storage at: last - 1] ifFalse: [nil] )

    "Iterating"
    do: block = (
        first to: last - 1 do: [ :i | block value: (storage at: i) ]
    )

    doIndexes: block = (
        1 to: last - first do: block
    )

    "Adding"
    , element = ( ^self append: element )

    append: element = (
        (last >= storage length) ifTrue: [
            "Need to expand capacity first"
            | newStorage |
            newStorage := Array new: (2 * storage length).
            storage doIndexes: [ :i | newStorage at: i put: (storage at: i) ].
            storage := newStorage. ].

        storage at: last put: element.
        last := last + 1.
        ^self
    )

    appendAll: collection = (
        collection do: [:e |
            self append: e ]
    )

    "Removing"
    remove = (
        (last > first)
            ifTrue:  [ last := last - 1. ^storage at: last ]
            ifFalse: [
                self error:
                    'Vector: Attempting to pop element from empty Vector' ]
    )

    remove: object = (
        | newArray newLast found |
        newArray := Array new: self capacity.
        newLast := 1.
        found := false.

        self do: [ :it |
          (it == object)
              ifTrue:  [ found := true ]
              ifFalse: [
                  newArray at: newLast put: it.
                  newLast := newLast + 1.
              ]
        ].

        storage := newArray.
        last := newLast.
        first := 1.
        ^found
    )

    contains: anObject = (
        ^ storage contains: anObject
    )

    "If anObject is in vector, return index of first occurance.
     If it isn't, return -1."
    indexOf: anObject = (
        first to: last - 1 do: [ :i |
            (storage at: i) = anObject ifTrue: [ ^ i - first + 1 ] ].
        ^ -1
    )

    "Printing"
    println = (
        '(' print.
        self do: [ :it | '(' print. it print. ')' print ].
        ')' println
    )

    "Sizing"
    isEmpty  = ( ^last = first   )
    size     = ( ^last - first   )
    capacity = ( ^storage length )

    "Conversion"
    asArray = ( | arr |
        arr := Array new: self size.
        self doIndexes: [ :i | arr at: i put: (self at: i) ].
        ^arr
    )

    "Private"
    initialize: size = (
        storage := Array new: size.
        first := 1.
        last  := 1.
    )

    checkIndex: index ifValid: block = (
        ^ ((first <= index) && (index < last)
            ifTrue: [ block value ]
            ifFalse: [
                self error:
                    'Vector[' + first asString + '..' + last asString +
                    ']: Index ' + index asString + ' out of bounds' ])
    )

    "DeltaBlue"
    removeFirst = (
        self isEmpty ifTrue: [ self error: 'OrderedCollection is empty' ].
        first := first + 1.
        ^ storage at: first - 1
    )

    "Conversion"
    asSet = (
        ^ Set new addAll: self
    )

    ----------------------------

    "Allocation"
    new              = ( ^ self new: 50 )
    new: initialSize = ( ^ super new initialize: initialSize )

    with: elem = (
        | newVector |
        newVector := self new: 1.
        newVector append: elem.
        ^ newVector
    )

)
