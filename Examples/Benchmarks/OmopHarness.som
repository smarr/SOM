"
Copyright (c) 2001-2013 see AUTHORS file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"

OmopHarness = (

    "The BenchmarkHarness can be invoked on the command line and should be
    passed a list of benchmarks to run (class names) as arguments. It will
    run each of them and output single as well as a total."
    
    | total runtimes benchmarkClasses numIterations warmUp innerIterations maxRuntime printAll runEnforced |
    
    benchmarkClasses: classes = ( benchmarkClasses := classes )
    printAll: aBool = ( printAll := aBool )
    maxRuntime: seconds = ( maxRuntime := seconds )
    numIterations: anInt = (numIterations := anInt)
    warmUp: anInt = (warmUp := anInt)
    
    total = ( ^ total )
    
    run: args = (
        args length < 2 ifTrue: [ ^ self printUsage ].
        
        self initialize.
        self processArguments: args.

        self runBenchmarks.
        self printTotal.
    )
    
    initialize = (
        total         := 0.
        runtimes      := Dictionary new.
        numIterations := 1.
        warmUp        := 0.
        innerIterations := 1.
        maxRuntime    := nil.
        printAll      := true.
        runEnforced   := false.
    )
    
    printUsage = (
      './som.sh -cp Smalltalk Examples/Benchmarks/BenchmarkHarness.som [benchmarks]+ run-enforced [num-iterations [warm-up [inner-iter]]]' println.
      '' println.
      '  run-enforced   - whether to run benchmark in enforced mode, default: false' println.
      '  benchmarks     - list of benchmark class names (e.g.: Queens Fibonacci Dispatch)' println.
      '  num-iterations - number of times each benchmark is executed, default: 1' println.
      '  warm-up        - number of times each benchmark is executed before measuring, default: 0' println.
      '  inner-iter     - number of times each benchmark is executed in an inner loop, which is measured in total, default: 1' println.
    )
    
    processArguments: args = (
        | remainingArgs |
        remainingArgs := self collectBenchmarkClasses: args.
        remainingArgs ifNotNil: [
            
            numIterations := (remainingArgs at: 1) asInteger.
            remainingArgs length > 1 ifTrue: [
                warmUp := (remainingArgs at: 2) asInteger.
                remainingArgs length > 2 ifTrue: [
                    innerIterations := (remainingArgs at: 3) asInteger.
                ].
            ].
        ]
    )
    
    collectBenchmarkClasses: args = (
        | i |
        i := 2. "First argument is the OmopHarness"
        
        benchmarkClasses := Vector new: args length - 1.
        [i <= args length] whileTrue: [
            | sym cls arg |
            arg := args at: i.
            
            "If it is the enforced parameter, we are done with the loop"
            ('true' = arg or: ['false' = arg]) ifTrue: [
                runEnforced := 'true' = arg.
                ^ args copyFrom: i + 1 to: args length ].
            
            sym := arg asSymbol.
            cls := system load: sym.
            cls ifNil: [
                "This item does not seem to be a class, so it is most likely
                 one of the other parameters"
                 ^ args copyFrom: i to: args length ].
            cls := system resolve: sym.
            benchmarkClasses append: cls.
            i := i + 1 ].

        ^ nil
    )
        
    runBenchmarks = (
        benchmarkClasses do: [ :benchmark |
            | time bench |
            bench := benchmark new.
            bench maxRuntime: maxRuntime.
            bench omopMode: runEnforced.
            
            bench run: numIterations with: warmUp and: innerIterations printAll: printAll.
            total := total + bench total.
            runtimes at: benchmark put: bench total.
            
            self reportRun: bench.

            '' println. ]
    )
    
    reportRun: bench = (
        bench name print.
        ': iterations=' print.
        bench numIterations print.
        ' average: ' print.
        (bench total / bench numIterations) print.
        'us' print.
        ' total: ' print.
        bench total print.
        'us' println.
    )
        
    printTotal = (
        ('Total Runtime: ' + total asString + 'us') println.
    )

)
